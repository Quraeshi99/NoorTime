#!/bin/bash

echo "Creating your .env file with full documentation..."

cat > .env <<'EOL'
# -----------------------------------------------
# .env - Environment Configuration File
# -----------------------------------------------
# Copy this file to .env and fill in the values.

# ----------------------------------------
#  Flask Application Configuration
# ----------------------------------------
FLASK_APP=run.py
FLASK_ENV=development
FLASK_DEBUG=1
SECRET_KEY=ab9d10378ee2e4aa0f54c9dc79a3e90bf68e53de07a46233

# ----------------------------------------
#  Database Configuration
# ----------------------------------------
SQLALCHEMY_DATABASE_URI=sqlite:///database.db
SQLALCHEMY_TRACK_MODIFICATIONS=False

# ----------------------------------------
# Prayer Times API
# ----------------------------------------
PRAYER_API_ADAPTER="AlAdhanAdapter"
PRAYER_API_BASE_URL="http://api.aladhan.com/v1"

# ----------------------------------------
#  Weather API
# ----------------------------------------
OPENWEATHERMAP_API_KEY=54fbdf40a1bfd7eafb7d404b8c4b2183

# ----------------------------------------
#  Default Geo Coordinates (Fallback)
# ----------------------------------------
DEFAULT_LATITUDE="19.2183"
DEFAULT_LONGITUDE="72.8493"
DEFAULT_CALCULATION_METHOD="Hanafi"

# ----------------------------------------
# SMTP Settings (Dynamic Selection)
# ----------------------------------------
# Options: gmail / outlook / zoho
MAIL_PROVIDER=outlook

# === Gmail SMTP ===
GMAIL_SERVER=smtp.gmail.com
GMAIL_PORT=587
GMAIL_USE_TLS=true
GMAIL_USERNAME=your_gmail@gmail.com
GMAIL_PASSWORD=your_gmail_app_password
GMAIL_DEFAULT_SENDER="Tarteel-ul-Quran OTP <your_gmail@gmail.com>"

# === Outlook SMTP ===
OUTLOOK_SERVER=smtp.office365.com
OUTLOOK_PORT=587
OUTLOOK_USE_TLS=true
OUTLOOK_USERNAME=Quraeshi99@hotmail.com
OUTLOOK_PASSWORD=Mumbai@99
OUTLOOK_DEFAULT_SENDER="Tarteel-ul-Quran OTP <Quraeshi99@hotmail.com>"

# === Zoho SMTP ===
ZOHO_SERVER=smtp.zoho.com
ZOHO_PORT=587
ZOHO_USE_TLS=true
ZOHO_USERNAME=your_zoho_email@zoho.com
ZOHO_PASSWORD=your_zoho_app_password
ZOHO_DEFAULT_SENDER="Tarteel-ul-Quran OTP <your_zoho_email@zoho.com>"

# ----------------------------------------
# ‚öôÔ∏è Production Options (Optional)
# ----------------------------------------
# GUNICORN_WORKERS=3
# REDIS_URL=redis://localhost:6379
# CELERY_BROKER_URL=redis://localhost:6379/0
# CELERY_RESULT_BACKEND=redis://localhost:6379/1
EOL

echo " .env file created with comments."

# ----------------------------------------
# validate_env.py generator
# ----------------------------------------

cat > validate_env.py <<'PYCODE'
import os
from dotenv import load_dotenv

load_dotenv()

REQUIRED_KEYS = {
    "FLASK_APP": str,
    "FLASK_ENV": str,
    "SECRET_KEY": str,
    "SQLALCHEMY_DATABASE_URI": str,
    "OPENWEATHERMAP_API_KEY": str,
    "PRAYER_API_ADAPTER": str,
    "PRAYER_API_BASE_URL": str,
    "MAIL_PROVIDER": str,
}

def validate_key(key, expected_type):
    value = os.getenv(key)
    if not value:
        print(f"‚ùå MISSING: {key}")
        return False
    try:
        if expected_type == int:
            int(value)
        elif expected_type == float:
            float(value)
        elif expected_type == str:
            str(value)
    except ValueError:
        print(f"‚ùå INVALID TYPE for {key}: expected {expected_type.__name__}")
        return False
    return True

def validate_env():
    print("üîç Validating required environment variables...")
    all_good = True
    for key, expected_type in REQUIRED_KEYS.items():
        if not validate_key(key, expected_type):
            all_good = False

    if all_good:
        print("‚úÖ Environment variables are valid.")
    else:
        print("‚ùó Please fix the issues in your .env file.")
        exit(1)

    return all_good
PYCODE

echo "‚úÖ validate_env.py created."

# ----------------------------------------
# Inject into run.py (safely if not exists)
# ----------------------------------------

if ! grep -q "validate_env" run.py; then
    echo "üîÅ Injecting validator into run.py..."
    TMP=$(mktemp)
    echo '# Auto-validation of .env' > "$TMP"
    echo 'import sys' >> "$TMP"
    echo 'from validate_env import validate_env' >> "$TMP"
    echo 'if not validate_env():' >> "$TMP"
    echo '    print("‚ùå Environment validation failed. Exiting...")' >> "$TMP"
    echo '    sys.exit(1)' >> "$TMP"
    echo '' >> "$TMP"
    cat run.py >> "$TMP"
    mv "$TMP" run.py
    echo "‚úÖ run.py updated with validator logic."
else
    echo "‚ÑπÔ∏è run.py already contains validator logic."
fi

# ----------------------------------------
# Install required packages
# ----------------------------------------

if [ -f "requirements.txt" ]; then
    echo "üì¶ Installing Python packages..."
    pip install -r requirements.txt
else
    echo "‚ö†Ô∏è requirements.txt not found!"
fi

echo "üéâ Setup complete ‚Äî .env, validator, SMTP config ‚Äî ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§∞‡•á‡§°‡•Ä!"
