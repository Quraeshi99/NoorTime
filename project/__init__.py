# project/__init__.py
import sentry_sdk
from sentry_sdk.integrations.flask import FlaskIntegration
from flask_mail import Mail
from .utils.mail_config import get_smtp_config
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect
from .extensions import limiter, migrate
import os
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect
from flask_cors import CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

# config.py ‡§∏‡•á ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
# ‡§π‡§Æ‡•á‡§Ç config.py ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è sys.path ‡§ï‡•ã ‡§è‡§°‡§ú‡§∏‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à
# ‡§Ø‡§æ config.py ‡§ï‡•ã ‡§≠‡•Ä project ‡§™‡•à‡§ï‡•á‡§ú ‡§ï‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§¨‡§®‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
# ‡§Ö‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§Æ ‡§Æ‡§æ‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø run.py ‡§∏‡§π‡•Ä ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§™‡§æ‡§∏ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
# from config import config_by_name # ‡§Ø‡§π ‡§Ø‡§π‡§æ‡§Å ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø config.py ‡§™‡•à‡§ï‡•á‡§ú ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à

# ‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∂‡§® ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§¨‡§ø‡§®‡§æ ‡§ê‡§™ ‡§ï‡•á
db = SQLAlchemy()
login_manager = LoginManager()
csrf = CSRFProtect()
cors = CORS() # CORS ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§≠‡•Ä ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
mail = Mail()
limiter = Limiter(
    key_func=get_remote_address,
    # default_limits ‡§î‡§∞ storage_uri ‡§ê‡§™ ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§ø‡§è ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á
    # strategy="fixed-window" # ‡§Ø‡§æ ‡§ê‡§™ ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§Æ‡•á‡§Ç
)

# Flask-Login ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§®
login_manager.login_view = 'auth.login' # auth ‡§¨‡•ç‡§≤‡•Ç‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§Æ‡•á‡§Ç login ‡§∞‡•Ç‡§ü
login_manager.login_message_category = 'info'
login_manager.login_message = "‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§™‡•É‡§∑‡•ç‡§†‡§æ‡§µ‡§∞ ‡§™‡•ç‡§∞‡§µ‡•á‡§∂ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡§æ." # Login message in Marathi or English as per app lang

def create_app(config_name):

    sentry_sdk.init(
        dsn="https://86fa82252c8e7c403361307d500fb84f@o4509459679281152.ingest.us.sentry.io/4509459707789312",  # ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ Sentry DSN ‡§°‡§æ‡§≤‡§®‡§æ ‡§π‡•à
        integrations=[FlaskIntegration()],
        send_default_pii=True,       # User info ‡§≠‡•á‡§ú‡§®‡§æ ‡§π‡•ã ‡§§‡•ã True ‡§∞‡§ñ‡•ã
        traces_sample_rate=1.0       # Performance tracing ‡§ï‡•á ‡§≤‡§ø‡§è, 0.0 ‡§∏‡•á 1.0 ‡§§‡§ï, 1.0 ‡§Æ‡§§‡§≤‡§¨ 100%
    )

    app = Flask(__name__,
                instance_relative_config=False,
                static_folder='static',
                template_folder='templates')

    # ‡§¨‡§æ‡§ï‡•Ä ‡§ï‡§æ ‡§ï‡•ã‡§° ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä...
def create_app(config_name):
    """
    Flask Application Factory.
    """
    app = Flask(__name__, 
                instance_relative_config=False, # True if config.py is in an 'instance' folder
                static_folder='static',      # project/static
                template_folder='templates') # project/templates

    # config.py ‡§∏‡•á ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    # config.py ‡§∞‡•Ç‡§ü ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§Ç ‡§â‡§∏‡•á ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§¢‡•Ç‡§Ç‡§¢‡§®‡§æ ‡§π‡•ã‡§ó‡§æ
    # ‡§Ø‡§æ config ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á ‡§™‡§æ‡§∏ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ, ‡§ú‡•à‡§∏‡§æ run.py ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
    # create_app ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•ã config ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§∏‡•Ä‡§ß‡•á run.py ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§
    if isinstance(config_name, str): # If config_name is a string like 'development'
        from config import config_by_name # Dynamically import if not already done
        app.config.from_object(config_by_name[config_name])
        app.logger.info(f"App configured with: {config_name}")
    else: # If config_name is already a config object
        app.config.from_object(config_name)
        app.logger.info(f"App configured with object: {config_name.__class__.__name__}")


    # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø SECRET_KEY ‡§∏‡•á‡§ü ‡§π‡•à
    if not app.config.get('SECRET_KEY'):
        app.logger.error("CRITICAL: SECRET_KEY is not set! Application will not run securely.")
        # raise ValueError("SECRET_KEY must be set in the configuration.")
        # For Replit, it might be set via Secrets, so app.config.get will fetch it.
        # If it's truly missing, the app might fail or be insecure.

    # ‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∂‡§® ‡§ï‡•ã ‡§ê‡§™ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    csrf.init_app(app)
    cors.init_app(app, resources={r"/api/*": {"origins": "*"}}) # API ‡§∞‡•Ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è CORS
    # üì¨ Mail Config from .env file
    smtp_config = get_smtp_config()

    app.config['MAIL_SERVER'] = smtp_config['server']
    app.config['MAIL_PORT'] = smtp_config['port']
    app.config['MAIL_USE_TLS'] = smtp_config['use_tls']
    app.config['MAIL_USE_SSL'] = not smtp_config['use_tls']
    app.config['MAIL_USERNAME'] = smtp_config['username']
    app.config['MAIL_PASSWORD'] = smtp_config['password']
    app.config['MAIL_DEFAULT_SENDER'] = smtp_config['default_sender']

    mail.init_app(app)
    # Limiter ‡§ï‡•ã ‡§ê‡§™ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
    limiter.init_app(app)

    from .models import User

    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))


    with app.app_context():
        # ‡§¨‡•ç‡§≤‡•Ç‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
        from .routes.main_routes import main_bp
        from .routes.auth_routes import auth_bp
        from .routes.api_routes import api_bp
        from .routes.test_mail import test_mail_bp

        app.register_blueprint(main_bp)
        app.register_blueprint(auth_bp, url_prefix='/auth') # /auth/login, /auth/register
        app.register_blueprint(api_bp, url_prefix='/api')   # /api/initial_data, /api/live_data
        app.register_blueprint(test_mail_bp, url_prefix='/test')  

        app.logger.info("Blueprints registered.")

        # ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ü‡•á‡§¨‡§≤‡•ç‡§∏ ‡§¨‡§®‡§æ‡§è‡§Å (‡§Ø‡§¶‡§ø ‡§µ‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç)
        # db.create_all() # ‡§á‡§∏‡•á 'flask create-db' ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•á ‡§ï‡§∞‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•à
        
        # ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§î‡§∞ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§¶‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•ã)
        log_level_str = app.config.get('LOG_LEVEL', 'INFO').upper()
        log_level = getattr(logging, log_level_str, logging.INFO)
        app.logger.setLevel(log_level)
        
        if not app.debug and not app.testing:
            # Production logging (example: to stderr, Replit handles this well)
            stream_handler = logging.StreamHandler()
            stream_handler.setLevel(log_level)
            # formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            # stream_handler.setFormatter(formatter)
            # app.logger.addHandler(stream_handler) # Flask's default logger already logs to stderr
            pass # Flask's default logger is usually sufficient for Replit console output

        app.logger.info(f"Application initialized with environment: {app.config.get('FLASK_ENV')}, Debug: {app.config.get('DEBUG')}")

        return app
