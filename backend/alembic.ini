# A generic alembic configuration file.

[alembic]
# path to migration scripts
script_location = migrations

# template for migration file names, e.g. "%%(rev)s_%%(slug)s.py"
file_template = %%(rev)s_%%(slug)s

# timezone to use when stamping migrations.
# from python 3.9, zoneinfo is available in the standard library
# from python 3.7, backports.zoneinfo is available on pypi
# Examples: GMT, Europe/London, America/New_York
# timezone =

# title for migration file names
# slug_limit = 40

# max length of characters to display in revision identifiers
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without a source .py file
# sourceless = false

# The SQLAlchemy URL to connect to, typically read from environment
# variables or other configuration sources.
# sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated migration scripts.
#
# The 'hooks' option is a comma-separated list of hook names.
# The remaining options are the configurations for each hook.
#
# Hook names are defined by you, and must have a corresponding
# .type option defined.
#
# The following types are available:
# - 'exec' - a shell command. The new script's filename is passed as the
#   first argument.
#
# hooks = autopep8
# autopep8.type = exec
# autopep8.entrypoint = autopep8
# autopep8.options = --in-place


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S
